#!/usr/bin/env python3
import sys
import threading
import time

import cv2 as cv
import numpy as np
import rospy
from detectron2.config import get_cfg
from detectron2.data import MetadataCatalog
from cv_bridge import CvBridge, CvBridgeError

# import some common detectron2 utilities
from detectron2.engine import DefaultPredictor
from detectron2.utils.logger import setup_logger
from detectron2.utils.visualizer import Visualizer
from detectron2_ros.msg import Result
from sensor_msgs.msg import Image, RegionOfInterest
from message_filters import Subscriber, ApproximateTimeSynchronizer

from preprocess import center_crop

class Detectron2node(object):
    def __init__(self):
        rospy.logwarn("Initializing")
        setup_logger()

        self._bridge = CvBridge()
        self._last_msgs = None
        self._msg_lock = threading.Lock()
        self._image_counter = 0

        self.cfg = get_cfg()
        self.cfg.merge_from_file(self.load_param("~config"))
        self.cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = self.load_param(
            "~detection_threshold"
        )  # set threshold for this model
        self.cfg.MODEL.WEIGHTS = self.load_param("~model")
        self._class_names = rospy.get_param('~class_names') 

        self.predictor = DefaultPredictor(self.cfg)

        self._visualization = self.load_param("~visualization", True)
        self.camera_ns = list(rospy.get_param('~camera_ns'))
        self._result_pubs = [rospy.Publisher(f'/{cam}/detection/result', Result, queue_size=1) for cam in self.camera_ns]
        self._vis_pubs = [rospy.Publisher(f'/{cam}/detection/vis', Image, queue_size=1) for cam in self.camera_ns]

        color_topic = str(rospy.get_param("/color_topic",'color/image_raw'))
        self._subs = [Subscriber(f'/{cam}/camera/{color_topic}', Image) for cam in self.camera_ns]
        self._ats = ApproximateTimeSynchronizer(self._subs, queue_size=10, slop=0.1)
        self._ats.registerCallback(self.imgs_cb)
        self.start_time = time.time()
        rospy.logwarn("Initialized")

    def run(self):
        rate = rospy.Rate(100)
        while not rospy.is_shutdown():
            if self._msg_lock.acquire(False):
                img_msgs = self._last_msgs
                self._last_msgs = None
                self._msg_lock.release()
            else:
                rate.sleep()
                continue

            if img_msgs is not None:
                self._image_counter = self._image_counter + 1
                if (self._image_counter % 11) == 10:
                    rospy.loginfo(
                        "Images detected per second=%.2f",
                        float(self._image_counter) / (time.time() - self.start_time),
                    )

                for i in range(len(self.camera_ns)):
                    np_image = self.convert_to_cv_image(img_msgs[i])
                    # np_image = center_crop(np_image,14,89,25,75)
                    outputs = self.predictor(np_image)
                    result = outputs["instances"].to("cpu")
                    result_msg = self.getResult(result,self._headers[i])

                    self._result_pubs[i].publish(result_msg)

                    # Visualize results
                    if self._visualization:
                        v = Visualizer(
                            np_image[:, :, ::-1],
                            MetadataCatalog.get(self.cfg.DATASETS.TRAIN[0]),
                            scale=1.2,
                        )
                        v = v.draw_instance_predictions(outputs["instances"].to("cpu"))
                        img = v.get_image()[:, :, ::-1]

                        image_msg = self._bridge.cv2_to_imgmsg(img, encoding="rgb8")
                        self._vis_pubs[i].publish(image_msg)

            rate.sleep()

    def getResult(self, predictions, header):

        boxes = predictions.pred_boxes if predictions.has("pred_boxes") else None

        if predictions.has("pred_masks"):
            masks = np.asarray(predictions.pred_masks)
        else:
            return

        result_msg = Result()
        result_msg.header = header
        result_msg.class_ids = (
            predictions.pred_classes if predictions.has("pred_classes") else None
        )
        result_msg.class_names = np.array(self._class_names)[
            result_msg.class_ids.numpy()
        ]
        result_msg.scores = predictions.scores if predictions.has("scores") else None

        for i, (x1, y1, x2, y2) in enumerate(boxes):
            mask = np.zeros(masks[i].shape, dtype="uint8")
            mask[masks[i, :, :]] = 255
            mask = self._bridge.cv2_to_imgmsg(mask)
            result_msg.masks.append(mask)

            box = RegionOfInterest()
            box.x_offset = np.uint32(x1)
            box.y_offset = np.uint32(y1)
            box.height = np.uint32(y2 - y1)
            box.width = np.uint32(x2 - x1)
            result_msg.boxes.append(box)

        return result_msg

    def convert_to_cv_image(self, image_msg):

        if image_msg is None:
            return None

        self._width = image_msg.width
        self._height = image_msg.height
        channels = int(len(image_msg.data) / (self._width * self._height))

        encoding = None
        if image_msg.encoding.lower() in ["rgb8", "bgr8"]:
            encoding = np.uint8
        elif image_msg.encoding.lower() == "mono8":
            encoding = np.uint8
        elif image_msg.encoding.lower() == "32fc1":
            encoding = np.float32
            channels = 1

        cv_img = np.ndarray(
            shape=(image_msg.height, image_msg.width, channels),
            dtype=encoding,
            buffer=image_msg.data,
        )

        if image_msg.encoding.lower() == "mono8":
            cv_img = cv.cvtColor(cv_img, cv.COLOR_RGB2GRAY)
        else:
            cv_img = cv.cvtColor(cv_img, cv.COLOR_RGB2BGR)

        return cv_img

    def imgs_cb(self, *img_msgs):
        rospy.logdebug("Get images")
        if self._msg_lock.acquire(False):
            self._last_msgs = [msg for msg in img_msgs]
            self._headers = [msg.header for msg in img_msgs]
            self._msg_lock.release()

    @staticmethod
    def load_param(param, default=None):
        new_param = rospy.get_param(param, default)
        rospy.loginfo("[Detectron2] %s: %s", param, new_param)
        return new_param


def main(argv):
    rospy.init_node("detectron2_ros")
    node = Detectron2node()
    node.run()


if __name__ == "__main__":
    main(sys.argv)
